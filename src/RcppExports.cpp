// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/StructCoalescent.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// DTALikelihoodC
List DTALikelihoodC(NumericMatrix ED, NumericMatrix fit_mig_mat, NumericVector node_indices);
static SEXP _StructCoalescent_DTALikelihoodC_try(SEXP EDSEXP, SEXP fit_mig_matSEXP, SEXP node_indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type ED(EDSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type fit_mig_mat(fit_mig_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type node_indices(node_indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(DTALikelihoodC(ED, fit_mig_mat, node_indices));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _StructCoalescent_DTALikelihoodC(SEXP EDSEXP, SEXP fit_mig_matSEXP, SEXP node_indicesSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_StructCoalescent_DTALikelihoodC_try(EDSEXP, fit_mig_matSEXP, node_indicesSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// DemeDecompC
List DemeDecompC(NumericMatrix ED, int n_deme, NumericVector node_indices);
static SEXP _StructCoalescent_DemeDecompC_try(SEXP EDSEXP, SEXP n_demeSEXP, SEXP node_indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type ED(EDSEXP);
    Rcpp::traits::input_parameter< int >::type n_deme(n_demeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type node_indices(node_indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(DemeDecompC(ED, n_deme, node_indices));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _StructCoalescent_DemeDecompC(SEXP EDSEXP, SEXP n_demeSEXP, SEXP node_indicesSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_StructCoalescent_DemeDecompC_try(EDSEXP, n_demeSEXP, node_indicesSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// FitMigMatC
NumericMatrix FitMigMatC(NumericMatrix bit_mm, NumericVector coal_rate);
static SEXP _StructCoalescent_FitMigMatC_try(SEXP bit_mmSEXP, SEXP coal_rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type bit_mm(bit_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type coal_rate(coal_rateSEXP);
    rcpp_result_gen = Rcpp::wrap(FitMigMatC(bit_mm, coal_rate));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _StructCoalescent_FitMigMatC(SEXP bit_mmSEXP, SEXP coal_rateSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_StructCoalescent_FitMigMatC_try(bit_mmSEXP, coal_rateSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// BitMigMatC
NumericMatrix BitMigMatC(NumericMatrix fit_mm, NumericVector coal_rate);
static SEXP _StructCoalescent_BitMigMatC_try(SEXP fit_mmSEXP, SEXP coal_rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type fit_mm(fit_mmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type coal_rate(coal_rateSEXP);
    rcpp_result_gen = Rcpp::wrap(BitMigMatC(fit_mm, coal_rate));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _StructCoalescent_BitMigMatC(SEXP fit_mmSEXP, SEXP coal_rateSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_StructCoalescent_BitMigMatC_try(fit_mmSEXP, coal_rateSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// NodeCountC
List NodeCountC(NumericMatrix ED, int n_deme, NumericVector node_indices);
static SEXP _StructCoalescent_NodeCountC_try(SEXP EDSEXP, SEXP n_demeSEXP, SEXP node_indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type ED(EDSEXP);
    Rcpp::traits::input_parameter< int >::type n_deme(n_demeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type node_indices(node_indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(NodeCountC(ED, n_deme, node_indices));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _StructCoalescent_NodeCountC(SEXP EDSEXP, SEXP n_demeSEXP, SEXP node_indicesSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_StructCoalescent_NodeCountC_try(EDSEXP, n_demeSEXP, node_indicesSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// NodeIndicesC
NumericVector NodeIndicesC(NumericMatrix ED);
static SEXP _StructCoalescent_NodeIndicesC_try(SEXP EDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type ED(EDSEXP);
    rcpp_result_gen = Rcpp::wrap(NodeIndicesC(ED));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _StructCoalescent_NodeIndicesC(SEXP EDSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_StructCoalescent_NodeIndicesC_try(EDSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// SC_like_C
double SC_like_C(NumericMatrix ED, NumericVector coal_rate, NumericMatrix bit_mig_mat, NumericVector node_indices);
static SEXP _StructCoalescent_SC_like_C_try(SEXP EDSEXP, SEXP coal_rateSEXP, SEXP bit_mig_matSEXP, SEXP node_indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type ED(EDSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type coal_rate(coal_rateSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type bit_mig_mat(bit_mig_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type node_indices(node_indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(SC_like_C(ED, coal_rate, bit_mig_mat, node_indices));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _StructCoalescent_SC_like_C(SEXP EDSEXP, SEXP coal_rateSEXP, SEXP bit_mig_matSEXP, SEXP node_indicesSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_StructCoalescent_SC_like_C_try(EDSEXP, coal_rateSEXP, bit_mig_matSEXP, node_indicesSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sample_path_unif3
arma::mat sample_path_unif3(const int a, const int b, const double t0, const double t1, const arma::mat& Q, const arma::mat& P);
static SEXP _StructCoalescent_sample_path_unif3_try(SEXP aSEXP, SEXP bSEXP, SEXP t0SEXP, SEXP t1SEXP, SEXP QSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const int >::type a(aSEXP);
    Rcpp::traits::input_parameter< const int >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< const double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_path_unif3(a, b, t0, t1, Q, P));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _StructCoalescent_sample_path_unif3(SEXP aSEXP, SEXP bSEXP, SEXP t0SEXP, SEXP t1SEXP, SEXP QSEXP, SEXP PSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_StructCoalescent_sample_path_unif3_try(aSEXP, bSEXP, t0SEXP, t1SEXP, QSEXP, PSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _StructCoalescent_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("List(*DTALikelihoodC)(NumericMatrix,NumericMatrix,NumericVector)");
        signatures.insert("List(*DemeDecompC)(NumericMatrix,int,NumericVector)");
        signatures.insert("NumericMatrix(*FitMigMatC)(NumericMatrix,NumericVector)");
        signatures.insert("NumericMatrix(*BitMigMatC)(NumericMatrix,NumericVector)");
        signatures.insert("List(*NodeCountC)(NumericMatrix,int,NumericVector)");
        signatures.insert("NumericVector(*NodeIndicesC)(NumericMatrix)");
        signatures.insert("double(*SC_like_C)(NumericMatrix,NumericVector,NumericMatrix,NumericVector)");
        signatures.insert("arma::mat(*sample_path_unif3)(const int,const int,const double,const double,const arma::mat&,const arma::mat&)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _StructCoalescent_RcppExport_registerCCallable() { 
    R_RegisterCCallable("StructCoalescent", "_StructCoalescent_DTALikelihoodC", (DL_FUNC)_StructCoalescent_DTALikelihoodC_try);
    R_RegisterCCallable("StructCoalescent", "_StructCoalescent_DemeDecompC", (DL_FUNC)_StructCoalescent_DemeDecompC_try);
    R_RegisterCCallable("StructCoalescent", "_StructCoalescent_FitMigMatC", (DL_FUNC)_StructCoalescent_FitMigMatC_try);
    R_RegisterCCallable("StructCoalescent", "_StructCoalescent_BitMigMatC", (DL_FUNC)_StructCoalescent_BitMigMatC_try);
    R_RegisterCCallable("StructCoalescent", "_StructCoalescent_NodeCountC", (DL_FUNC)_StructCoalescent_NodeCountC_try);
    R_RegisterCCallable("StructCoalescent", "_StructCoalescent_NodeIndicesC", (DL_FUNC)_StructCoalescent_NodeIndicesC_try);
    R_RegisterCCallable("StructCoalescent", "_StructCoalescent_SC_like_C", (DL_FUNC)_StructCoalescent_SC_like_C_try);
    R_RegisterCCallable("StructCoalescent", "_StructCoalescent_sample_path_unif3", (DL_FUNC)_StructCoalescent_sample_path_unif3_try);
    R_RegisterCCallable("StructCoalescent", "_StructCoalescent_RcppExport_validate", (DL_FUNC)_StructCoalescent_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_StructCoalescent_DTALikelihoodC", (DL_FUNC) &_StructCoalescent_DTALikelihoodC, 3},
    {"_StructCoalescent_DemeDecompC", (DL_FUNC) &_StructCoalescent_DemeDecompC, 3},
    {"_StructCoalescent_FitMigMatC", (DL_FUNC) &_StructCoalescent_FitMigMatC, 2},
    {"_StructCoalescent_BitMigMatC", (DL_FUNC) &_StructCoalescent_BitMigMatC, 2},
    {"_StructCoalescent_NodeCountC", (DL_FUNC) &_StructCoalescent_NodeCountC, 3},
    {"_StructCoalescent_NodeIndicesC", (DL_FUNC) &_StructCoalescent_NodeIndicesC, 1},
    {"_StructCoalescent_SC_like_C", (DL_FUNC) &_StructCoalescent_SC_like_C, 4},
    {"_StructCoalescent_sample_path_unif3", (DL_FUNC) &_StructCoalescent_sample_path_unif3, 6},
    {"_StructCoalescent_RcppExport_registerCCallable", (DL_FUNC) &_StructCoalescent_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_StructCoalescent(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
